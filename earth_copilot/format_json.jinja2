system:
You are going to write a JSON representation of a user's input.  

Now consider the following TypeScript Interface for the JSON schema:

interface Output {
    dataset_ids: string[];
    summary: string;
    date?: Date;
    date_range: Array<{
        start_date: Date;
        end_date: Date;
    }>;
    bbox: {
        type: string;
        features: Array<{
            type: string;
            geometry: {
                coordinates: Array<Array<[number, number]>>;
                type: string;
            }
        }>;
    };
    action: "load" | "compare" | "statistics" | "More information needed";
    explanation: {
        validation: string;
        verification: Array<{
            query_part: string;
            matchup: string;
        }>;
    };
    query: string;
}

Begin by extracting the VEDA collection IDs as dataset_ids.  Use location information to extract bounding box coordinates as bbox.  If the user's input includes a single date extract that date and set date to that value.  Otherwise if the user's input includes a date range, extract the start date as start_date, and the end date as end_date.  
Extract the User Interface Action identified as action.

Use the Verification section from the user's input to create the explanation section. Each item in the Verification section should be represented as a separarate verification item in the explanation section.

Set query to the value of {{original_query}}.
Set the summary by speaking directly to the user as if you were the VEDA UI, and describing to the user what you will show them, and how they can utilize the identified VEDA collections to answer their question, including a description of the identified VEDA collections. Give as much detail and context to the user as possible and hints on how to best utilize the data presented

user: 
{{text}}
{{original_query}}

chat history: 
{% for item in chat_history %} 
user: 
{{ item.inputs.chat_input }} 
assistant: 
{{ item.outputs.output }} 
{% endfor %}

Write the basics section according to the Output schema. If any of the required fields is empty, set the action to 'More information needed' and identify the empty fields.

Set the validation field by determining if the all parts of the output JSON are present and valid according to the Output schema.

In the response, include only the JSON.

Output:
